@inject TimeActivityObjectStore timeActivityObjectStore
@inject CheckInStateObjectStore checkInStateObjectStore
@inject NavigationManager navigationManager
@inject BlazorElement title
@inject BlazorElement formcard
@inject BlazorElement buttons

@page "/EditTimeActivity/{Id:int}"

@if (timeActivity is not null)
{
    <MudContainer MaxWidth="MaxWidth.ExtraSmall" Class="py-8">
        <div class="ax-hide @title">
            <MudText Style="--mud-typography-body1-size: 1.5rem;" Align="Align.Center">@timeActivity.Start.ToLongDateString()</MudText>
        </div>

        <div class="ax-hide @formcard">
        <MudCard>
            <MudForm @ref="form">
                <MudCardContent>
                    <MudTimePicker @bind-Time="startTime" Class="ma-2" Label="Start time" AmPm="true" />
                    <MudTimePicker @bind-Time="stopTime" Class="ma-2" Label="Stop time" AmPm="true" />

                    <MudTextField T="string" Label="Description" Class="ma-2" Variant="Variant.Text" @bind-Text="text" Lines="3" />
                </MudCardContent>
            </MudForm>
        </MudCard>
        </div>

        <div class="ax-hide @buttons">
            <MudPaper Class="d-flex justify-space-between flex-grow-1 pa-4 mt-4" Elevation="0">
                <MudButton Variant="Variant.Filled" Color="Color.Secondary" DisableElevation="true" OnClick="@Back">Back</MudButton>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@Save" Class="justify-end">Save</MudButton>
            </MudPaper>
        </div>
    </MudContainer>
}

@code {
    MudForm? form;

    TimeActivity timeActivity;
    TimeSpan? startTime;
    TimeSpan? stopTime;
    string text;

    protected async override void OnInitialized()
    {
        timeActivity = await timeActivityObjectStore.Get(Id);
        startTime = timeActivity.Start.TimeOfDay;
        stopTime = timeActivity.Stop.TimeOfDay;

        await InvokeAsync(() => StateHasChanged());

        await Task.WhenAll(
           title.MoveIn().Play(),
           title.FadeIn().Play(),
           formcard.MoveIn().Play(200),
           formcard.FadeIn().Play(200),
           buttons.MoveIn().Play(400),
           buttons.FadeIn().Play(400)
       );
    }

    void Back()
    {
        navigationManager.NavigateTo("Day");
    }

    async Task Save()
    {
        await form.Validate();

        if (!form.IsValid)
        {

        }

        timeActivity.Start = timeActivity.Start.Date + startTime.Value;
        timeActivity.Stop = timeActivity.Stop.Date + stopTime.Value;
        timeActivity.Duration = timeActivity.Stop - timeActivity.Start;
        await timeActivityObjectStore.Put(timeActivity);

        navigationManager.NavigateTo("Day");
    }

    [Parameter]
    public int Id { get; set; }
}